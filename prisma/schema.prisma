// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email    String
  password String
  role     Role   @default(MEMBER)

  profile     Profile?
  Transaction Transactions[]
  Chat        Chat[]
  ChatRoom    ChatRoom[]
}

model Profile {
  id Int @id @default(autoincrement())

  name    String?
  gender  Gender?
  phone   String?
  address String?
  avatar  String? @default("https://i.pinimg.com/originals/82/4d/b0/824db05450ed6305253092e8aedb329f.jpg")

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())

  name     String
  products Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name       String
  desc       String
  price      Int
  stock      Int
  categoryId Int

  productImages ProductImages[]

  category Category @relation(fields: [categoryId], references: [id])

  cartItems CartProduct[]
}

model ProductImages {
  id Int @id @default(autoincrement())

  url       String
  productId Int

  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id Int @id @default(autoincrement())

  userId     Int
  cartItems  CartProduct[]
  totalPrice Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Transaction Transactions?
}

model CartProduct {
  id        Int  @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Transactions {
  id Int @id @default(autoincrement())

  userId Int
  shipTo String?
  cartId Int     @unique

  totalAmount Int
  status      TransactionStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())

  cart    Cart     @relation(fields: [cartId], references: [id])
  payment Payment?
  user    User     @relation(fields: [userId], references: [id])
}

model Payment {
  id            Int @id @default(autoincrement())
  TransactionId Int @unique

  paymentStatus PaymentStatus
  paymentMethod String
  paymentUrl    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  transaction Transactions @relation(fields: [TransactionId], references: [id])
}

model ChatRoom {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId  Int
  adminId Int

  user User   @relation(fields: [userId], references: [id])
  Chat Chat[]
}

model Chat {
  id Int @id @default(autoincrement())

  message   String?
  createdAt DateTime @default(now())

  senderId   Int
  chatRoomId Int

  sender   User     @relation(fields: [senderId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  MEMBER
  ADMIN
}

enum TransactionStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}

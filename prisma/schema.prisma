// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email    String
  password String
  role     Role   @default(MEMBER)

  profile     Profile?
  Order       Order[]
  Participant Participant[]
  Message     Message[]
}

model Profile {
  id Int @id @default(autoincrement())

  name    String?
  gender  Gender?
  phone   String?
  address String?
  avatar  String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())

  name     String
  products Product[]
}

model Product {
  id Int @id @default(autoincrement())

  name       String
  desc       String
  price      Int
  stock      Int
  categoryId Int

  productImages ProductImages[]

  category Category @relation(fields: [categoryId], references: [id])

  cartItems CartProduct[]
}

model ProductImages {
  id Int @id @default(autoincrement())

  url       String
  productId Int

  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id Int @id @default(autoincrement())

  userId     Int
  cartItems  CartProduct[]
  totalPrice Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Order Order?
}

model CartProduct {
  id        Int  @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int?

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  shipTo String?
  cartId Int     @unique

  totalAmount Int
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  cart    Cart     @relation(fields: [cartId], references: [id])
  payment Payment?
  user    User     @relation(fields: [userId], references: [id])
}

model Payment {
  id      Int @id @default(autoincrement())
  OrderId Int @unique

  paymentStatus PaymentStatus
  paymentMethod String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Order Order @relation(fields: [OrderId], references: [id])
}

model Chat {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  title     String?

  Participant Participant[]
  Message     Message[]
}

model Participant {
  id Int @id @default(autoincrement())

  userId Int
  chatId Int

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

model Message {
  id Int @id @default(autoincrement())

  message   String?
  createdAt DateTime @default(now())

  senderId Int
  chatId   Int

  sender User @relation(fields: [senderId], references: [id])
  chat   Chat @relation(fields: [chatId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  MEMBER
  ADMIN
}

enum OrderStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}
